#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <WiFi.h>
#include <HTTPClient.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SSD1306_I2C_ADDRESS 0x3C  // Defina o endereço I2C como 0x3C ou 0x3D, conforme o seu display

#define ONE_WIRE_BUS 23  // Pino do DS18B20

// Defina os pinos I2C para o ESP32 (SDA e SCL)
#define I2C_SDA 21  // Pino SDA
#define I2C_SCL 22  // Pino SCL

// Credenciais Wi-Fi e endpoint da API
const char* ssid = "acelera";          // Substitua pelo seu SSID
const char* password = "12345678";  // Substitua pela sua senha
const char* apiEndpoint = "https://jsonplaceholder.typicode.com/posts"; // Endpoint para teste

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup() {
  Serial.begin(115200);
  
  // Configurar os pinos I2C
  Wire.begin(I2C_SDA, I2C_SCL);

  // Inicia o sensor de temperatura
  sensors.begin();
  
  // Inicia o display OLED
  if (!display.begin(SSD1306_I2C_ADDRESS, OLED_RESET)) {
    Serial.println(F("Falha ao iniciar o display SSD1306!"));
    for (;;);  // Loop infinito, se o display não inicializar
  }
  
  display.clearDisplay();
  display.display();

  // Conectar ao Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Conectando ao WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConectado ao WiFi!");
}

void loop() {
  // Leitura da temperatura
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);

  // Atualiza o display OLED
  display.clearDisplay();
  display.setTextSize(2); // Tamanho do texto
  display.setTextColor(SSD1306_WHITE); // Cor do texto
  display.setCursor(0, 0); // Posição inicial do texto
  display.print(temperature, 1); // Imprime a temperatura com 1 casa decimal
  display.print(" °C"); // Adiciona o símbolo °C
  display.display(); // Atualiza o display com o novo conteúdo

  // Imprime a temperatura no console
  Serial.print("Temperatura: ");
  Serial.print(temperature, 1); // Imprime a temperatura com 1 casa decimal
  Serial.println(" °C"); // Adiciona o símbolo °C no console

  // Enviar dados para a API
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(apiEndpoint); // Define o endpoint da API
    http.addHeader("Content-Type", "application/json"); // Define o tipo de conteúdo

    String jsonData = String("{\"temperature\": ") + temperature + String("}"); // Cria o JSON com a temperatura
    int httpResponseCode = http.POST(jsonData); // Envia o dado

    if (httpResponseCode > 0) {
      String response = http.getString(); // Recebe a resposta
      Serial.print("Código de resposta: ");
      Serial.println(httpResponseCode);
      Serial.println("Resposta da API: ");
      Serial.println(response);
    } else {
      Serial.print("Erro ao enviar: ");
      Serial.println(httpResponseCode);
    }

    http.end(); // Finaliza a conexão
  } else {
    Serial.println("Erro: Não está conectado ao WiFi.");
  }

  delay(1000);  // Espera 1 segundo antes da próxima leitura
}
